include configuration.inc            ; Подключение модуля


.code                                ; Сегмент кода программы
	start:                           ; Стартовая метка, начало программы
		push offset szTitle          ; Адрес стороки - заголовка консоли
		call SetConsoleTitleA@4      ; Функция, устанавливающая console title
		;---------------------
		push COLOR                   ; Константа с кодом цвета (насыщенный зелёный)
		call setColor                ; Функция, устанавливающая цвет текста и фона консоли
		;---------------------
		call main                    ; Главная процедура программы
		;---------------------
		push offset szExit           ; Адрес строки
		call StdOut@4                ; MASM функция вывода в консоль
		;---------------------
		call quit                    ; Завершение программы по нажатию любой клавиши
		;---------------------
		push 0
		call ExitProcess@4           ; Функция, завершающая работу программы


	;********************************************************

		main proc
			_do_while:                        ; Метка начала цикла
				push offset szLine1           ; Адрес строки
				call StdOut@4                 ; MASM функция вывода
				;----------------------
				push offset szBuffer          ; Адрес буфера
				call cIn                      ; Функция ввода и обработка полученного значения
				;----------------------
				cmp byte ptr[szBuffer], 0     ; Проверка, была ли введена строка или просто нажат Enter
				jz _do_end                    ; Выход из цикла во втором случае
				;----------------------
				push offset szBuffer          ; Если значание было введено, передача буфера
				call lens_p                   ; Вычисление количества символов в строке. Помещается в eax
				;----------------------
				push eax                      ; Количество символов в полученной строке
				push offset szForm            ; Адрес строки для форматирования
				push offset szBuffer          ; Адрес буфера для отформатированной строки
				call wsprintfA                ; Функция форматирования
				;----------------------
				add esp, 12                   ; Восстановление стека (3 параметра = 12)
				;----------------------
				push offset szBuffer          ; Адрес буферас отформатированной строкой
				call StdOut@4                 ; MASM функция вывода
				jmp _do_while                 ; Прыжок на начало цикла
			_do_end:                          ; Метка выхода из цикла
			ret
		main endp

	;********************************************************

		setColor proc
			push ebp
			mov ebp, esp
			;--------------
			push ebx
			push esi
			push edi
			;--------------
			push STD_OUTPUT_HANDLE              ; Код дескриптора вывода в консоль
			call GetStdHandle@4                 ; Получение дескриптора вывода в регистр eax
			;--------------
			push dword ptr[ebp + 8]             ; Аргумент - переменная со значиниями цвета
			push eax                            ; Дескриптор вывода в консоль
			call SetConsoleTextAttribute@8      ; Функция, устанавливающая свойства текста консоли
			;--------------
			pop edi
			pop esi
			pop ebx
			;--------------
			mov esp, ebp
			pop ebp
			ret 4
		setColor endp

	;********************************************************

		pBuffer   equ [ebp + 8]           ; Аргумент - адрес буфера
		cIn proc
			push ebp
			mov ebp, esp
			;--------------
			push ebx
			push esi
			push edi
			;--------------
			push MAX_SIZE                 ; Размер буфера (255)
			push pBuffer                  ; Адрес буфера (local_var)
			call StdIn@8                  ; MASM функция ввода
			;--------------
			push pBuffer                  ; Адрес буфера с введёнными значениями
			call StripLF@4                ; Отсечение ВК (13) и НС (10), добавление в конец 0
			;--------------
			pop edi
			pop esi
			pop ebx
			;--------------
			mov esp, ebp
			pop ebp
			ret 4
		cIn endp

	;********************************************************

		lens_p proc
			push ebp
			mov ebp, esp
			;--------------
			push ebx
			push esi
			push edi
			;--------------
			xor eax, eax                       ; Обнуляем регистр eax, необходимо для работы SCAS
			mov edi, dword ptr[ebp + 8]        ; Помещаем строку для вычисления в edi
			or ecx, 0ffffffffh                 ; Помещаем в регистр ecx максимальное значение без учёта знака
			;--------------                    ; REP(E/Z/NE/NZ) - префикс, повторяет команду следующую за ним
			repne scasb                        ; Вычисляем длинну строки, декремент ecx, пока не поднимется флаг нуля
			;--------------                    ; SCAS(B/W/D) работает с регистром edi. Сравнение с регистром al/ax/eax
			not ecx                            ; Инвертируем значение бит ecx
			dec ecx                            ; Полностью инвертируем значение содержащееся в ecx
			;--------------
			xor eax, ecx                       ; Перемешение значение из ecx в eax (step 1)
			xor ecx, eax                       ; Перемешение значение из ecx в eax (step 2)
			;--------------
			pop edi
			pop esi
			pop ebx
			;--------------
			mov esp, ebp
			pop ebp
			ret 4
		lens_p endp

	;********************************************************

		quit proc
			enter 8, 0
			;--------------
			push ebx
			push esi
			push edi
			;--------------
			push STD_INPUT_HANDLE         
			call GetStdHandle@4                   ; Получаем дескриптор ввода в консоль
			;--------------      
			mov ebx, eax                          ; Помещаем дескриптор в регистр ebx
			;--------------
			push 0                                ; Обнуляем все флаги, закрытие консоли по нажатию любой клавиши
			push eax                              ; Дескриптор вывода
			call SetConsoleMode@8                 ; Устанавливаем параметры консоли
			;--------------
			push 0                                ; Первый параметр функции ReadConsoleA (Default 0)
			;--------------
			lea esi, [ebp - 8]
			push esi                              ; Локальная переменная, хранящая количество введённых символов
			;--------------
			push 1                                ; Размер буфера
			;--------------
			lea esi, [ebp - 4]                    ; Локальная переменная, буфер
			push esi                              ; Адрес буфера
			;--------------
			push ebx                              ; Дескриптор ввода в консоль
			call ReadConsoleA@20                  ; Ожидание ввода
			;--------------
			pop edi
			pop esi
			pop ebx
			;--------------
			leave
			ret
		quit endp

	end start                                     ; Закрытие стартовой метки, конец программы
